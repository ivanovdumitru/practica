// Generated by CoffeeScript 1.9.2
var Notify, Tab, login_time, updateLogged;

Tab = (function() {
    function Tab() {
        this.tabs = [];
        this.navTabs = $('#tab');
        this.contentTabs = $('#content');
        this.currentTab = null;
        this.templates = {
            tab: '{% for tab in tabs %}<li><a href="#{{tab.id}}" title="{{tab.label}}" style="border-top-color: {{tab.color}}">{{tab.label}}</a><button type="button" class="close"><span class="glyphicon glyphicon-remove"></span></button></li>{% endfor %}'
        };
    }

    Tab.prototype.getTabId = function(id, index) {
        var i, j, len, ref, tab;
        if (index == null) {
            index = false;
        }
        ref = this.tabs;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
            tab = ref[i];
            if (tab.id === id) {
                if (index) {
                    return i;
                } else {
                    return tab;
                }
            }
        }
        return null;
    };

    Tab.prototype.add = function(tabObj) {
        var cb, contentWrapper;
        if (this.getTabId(tabObj.id)) {
            this.select(this.getTabId(tabObj.id, true));
        } else {
            this.tabs.push(tabObj);
            contentWrapper = $('<li />');
            this.contentTabs.append(contentWrapper);
            cb = tabObj.callback(contentWrapper);
            if (cb != null) {
                contentWrapper.html(cb);
            }
            this.currentTab = this.tabs.length - 1;
            this.render();
        }
    };

    Tab.prototype.close = function(index) {
        this.tabs.splice(index, 1);
        this.contentTabs.children('li').eq(index).find('.table-data .body').getNiceScroll().remove();
        this.contentTabs.children('li').eq(index).getNiceScroll().remove();
        this.contentTabs.children('li').eq(index).remove();
        if (this.currentTab > index) {
            this.currentTab--;
            index--;
        }
        if (this.currentTab === index) {
            if (this.tabs.length > index) {
                this.currentTab++;
            } else if (index > 0) {
                this.currentTab--;
            } else {
                this.currentTab = null;
            }
        }
        this.render();
    };

    Tab.prototype.select = function(index) {
        var tab, tabLeft, tabWidth, tabsLeft, tabsMargin, tabsWidth;
        if (index == null) {
            return;
        }
        this.navTabs.children('li').removeClass('active').eq(index).addClass('active');
        tab = this.navTabs.children('li').eq(index);
        tabsLeft = tab.parent().offset().left;
        tabsWidth = tab.parent().width();
        tabLeft = tab.offset().left;
        tabWidth = tab.outerWidth();
        tabsMargin = parseInt(this.navTabs.children('li').first().css('marginLeft'));
        if (tabLeft + tabWidth > tabsLeft + tabsWidth) {
            this.navTabs.children('li').first().css('marginLeft', tabsMargin + ((tabsLeft + tabsWidth) - (tabLeft + tabWidth)));
        } else if (tabLeft < tabsLeft) {
            this.navTabs.children('li').first().css('marginLeft', (tabsLeft - tabLeft) + tabsMargin);
        }
        this.contentTabs.children('li:visible').find('.table-data .body').getNiceScroll().hide();
        this.contentTabs.children('li').getNiceScroll().hide();
        this.contentTabs.children('li').hide().eq(index).show();
        if (this.contentTabs.children('li').eq(index).find('.table-data .body').length) {
            this.contentTabs.children('li').eq(index).find('.table-data .body').getNiceScroll().show();
        }
        if (this.contentTabs.children('li').eq(index).getNiceScroll().length) {
            this.contentTabs.children('li').eq(index).getNiceScroll().show();
        } else {
            this.contentTabs.children('li').eq(index).niceScroll({
                cursoropacitymin: 1,
                cursorwidth: 5,
                railpadding: {
                    top: 1,
                    right: 1,
                    left: 1,
                    bottom: 1
                }
            });
        }
        return $(window).trigger('resize');
    };

    Tab.prototype.render = function() {
        var tabWidth;
        this.navTabs.html(swig.render(this.templates.tab, {
            locals: {
                tabs: this.tabs
            }
        }));
        tabWidth = 0;
        this.navTabs.find('li').each(function() {
            return tabWidth += $(this).outerWidth();
        });
        if (tabWidth > this.navTabs.innerWidth()) {
            this.navTabs.parent().addClass('scroll');
        } else {
            this.navTabs.parent().removeClass('scroll');
        }
        this.select(this.currentTab);
    };

    return Tab;

})();

Notify = (function() {
    Notify.timer = null;

    Notify.time = 2;

    Notify.$notify = null;

    function Notify(message, type) {
        if (type == null) {
            type = 'success';
        }
        if (Notify.$notify == null) {
            if (!$('#notify').length) {
                $('body').append($('<div />', {
                    id: 'notify'
                }).html('<div />'));
            }
            Notify.$notify = $('#notify');
        }
        if (Notify.timer != null) {
            clearTimeout(Notify.timer);
        }
        Notify.$notify.children().removeClass().addClass(type).text(message);
        setTimeout(function() {
            Notify.$notify.addClass('active');
        }, 0);
        Notify.timer = setTimeout(function() {
            Notify.$notify.removeClass('active');
        }, Notify.time * 1000);
        return;
    }

    return Notify;

})();

login_time = 0;

updateLogged = function() {
    login_time = new Date() - user.logged_at;
    $('#logged_time').html(swig.render("{{time|date('H:i')}}", {
        locals: {
            time: login_time
        }
    }));
    $.get('/systems/users/update', null, function(response) {
        if (!response.logged) {
            location.reload();
        }
    });
};

confirmDialog = function(message, callback, callback_action_for, caption) {
  var confirmPopup, dialog;
  caption = caption || 'Confirmation';
  confirmPopup = $('.confirm').clone().appendTo('body');
  dialog = $('.dialog', confirmPopup);
  $('.title', dialog).text(caption);
  $('.info', dialog).text(message);
  $('.btn-success', dialog).prop('href', 'javascript:void(0);');
  confirmPopup.show();
  $('.cancel, .btn-success', dialog).off('click');
  $('.cancel', dialog).on('click', function() {
    if (callback_action_for === false) {
      callback();
    }
    confirmPopup.remove();
  });
  $('.btn-success', dialog).on('click', function() {
    if (callback_action_for === true) {
      callback();
    }
    confirmPopup.remove();
  });
};


    $(function() {
        $(window).on('beforeunload', function() {
            var expires;
            expires = new Date();
            console.log(Math.round(expires.getTime() / 1000));
            document.cookie = "refresh=" + (Math.round(expires.getTime() / 1000)) + ";expires=" + (new Date(expires.getTime() + 60000).toUTCString()) + ";";
        });
        $('#menu-icon').click(function() {
            $('#menu').toggleClass('active');
            return false;
        });
        $('#menus span').click(function() {
            $(this).closest('li').toggleClass('active');
            return false;
        });
        $('#logout').click(function() {
            $('.confirm').show();
            return false;
        });
        $('.confirm .cancel').click(function() {
            $('.confirm').hide();
        });
        Tab = new Tab();
        $('#menu a').click(function() {
            Tab.add(menuAction[this.hash.substr(1)]);
            $('#menu').trigger('mouseleave');
            return false;
        });
        $('#menu').mouseenter(function() {
            $(this).addClass('active');
        });
        $('#menu').mouseleave(function() {
            $(this).removeClass('active');
        });
        $('#tab').click(function(e) {
            var index;
            if ($(e.target).is('a')) {
                index = $(e.target).closest('li').index();
                Tab.select(index);
            } else if ($(e.target).is('button, span')) {
                index = $(e.target).closest('li').index();
                Tab.close(index);
            }
            return false;
        });
        return $('#prev, #next').click(function() {
            var margin, tabMargin, tabWidth;
            tabWidth = 0;
            tabMargin = 1;
            $('#tab li').each(function() {
                return tabWidth += $(this).outerWidth() + tabMargin;
            });
            if (tabWidth) {
                margin = parseInt($('#tab li:first').css('margin-left'));
                if ($('#tab').innerWidth() + margin < tabWidth) {
                    if ($(this).is('#next')) {
                        margin -= $('#tab li:first').outerWidth() + tabMargin;
                    } else {
                        margin += $('#tab li:first').outerWidth() + tabMargin;
                    }
                }
                if (margin > tabMargin) {
                    margin = tabMargin;
                } else if (Math.abs(margin) > tabWidth - $('#tab').innerWidth()) {
                    margin = -(tabWidth - $('#tab').innerWidth());
                }
                $('#tab li:first').animate({
                    marginLeft: margin
                });
            }
            return false;
        });
    });
